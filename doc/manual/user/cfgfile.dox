/*! \page user_cfgfile_page 3.4 Configuration Files

 \ref user_command_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
 \ref user_example_page  (Next) 
 <BR>

The instantaneous state of a system is recorded in a configuration file.  Each of the simpatico programs has a default configuration file format, and is also able to read and write several other formats. 

The default configuration file formats for mcSim, mdSim and ddSim are slightly different. In all cases, the default configuration file format contains the dimensions of the periodic boundary, and the positions of all atoms. Configuration file formats for mdSim and ddSim, that are designed for use with MD simulations, also contain atomic velocities. 

The default ddSim file format contains information about molecular topology (i.e., covalent bonding), while the default mcSim and mdSim configuration file formats do not. This difference is a result in the information available from the parameter file: The parameter files for mcSim and mcSim (but not ddSim) contain a description of every molecular species, including the number of atoms per molecule and a complete specification of its chemical structure. The configuration file formats for mcSim and mdSim thus contain only the box dimensions, atomic positions and (for mdSim) atomic velocities. In ddSim, their is no required notion of a molecular "species", and the configuration file format contains a complete description of the covalent connections among molecules, as discussed in more detail below. 

\section mcMd_config_sec Default format for mcSim and mcSim 

Below is an example of the default format for a small MC simulation. This is a configuration for simulation of 100 chains of a single species, each containing 8 atoms, in a periodic cubic unit cell with a length of 10.455 on each side.  The atomic positions are read in blocks, each corresponding to a particular molecule of a particular species, in which each line contains the position vector for one atom. The parameter file, which must be read before any configuration file, contains the number of species and the number of atoms per molecule in each species, and this information is used to read the configuration file. The actual number of molecules of each species is given in the configuration file at the beginning of the block corresponding to each species. The number of molecules of each species must be less than or equal to a capacity (i.e., a maximum allowable number of molecules) that is specified for each species in the parameter file.
\code
BOUNDARY

cubic     1.04551590e+01  

MOLECULES

species    0
nMolecule  100

molecule   0
  2.12705712e-02  7.50465064e+00  5.33063733e+00
  4.75519097e-01  6.80833332e+00  5.87779948e+00
  1.02432267e+01  6.12409007e+00  5.55320237e+00
  1.60229913e-02  5.16887176e+00  5.35542825e+00
  9.47558289e+00  5.29506208e+00  5.27749698e+00
  8.58984357e+00  4.91817981e+00  5.57530682e+00
  8.73678017e+00  5.09652501e+00  6.53783777e+00
  7.97424371e+00  4.43409027e+00  6.40267049e+00

molecule   1
  1.00112022e+01  1.94577915e+00  7.39582850e+00
  1.00526474e+01  1.27965674e+00  8.11321265e+00
  1.63479720e-01  2.06949985e+00  8.18806846e+00
  1.83731061e-01  2.85173437e+00  7.61292276e+00
  9.37873878e-01  3.45872087e+00  7.44123819e+00
  9.34502887e-01  4.43891139e+00  7.69464843e+00
  2.47202495e-02  4.71772059e+00  7.35615050e+00
  5.20426302e-01  5.14831798e+00  6.61609797e+00

molecule   2
  8.18166777e+00  3.28902912e+00  2.56060759e+00
  8.98185863e+00  3.40436895e+00  3.12817790e+00
  9.14005344e+00  2.82064283e+00  2.33976108e+00
  9.28638006e+00  1.83145194e+00  2.45304164e+00
  9.11369639e+00  2.06589316e+00  1.49830983e+00
  1.00121656e+01  2.17587536e+00  1.05189105e+00
  9.56703781e+00  3.00423744e+00  8.88425182e-01
  1.01357788e+01  3.60991243e+00  4.49428309e-01

molecule   3
  2.60094659e+00  5.88060607e+00  5.57256159e+00
  2.48234681e+00  5.90257826e+00  4.61869266e+00
  1.76959600e+00  5.33806861e+00  4.17580359e+00
  1.85408356e+00  4.85581613e+00  4.99377965e+00
  2.24873461e+00  3.95185665e+00  4.88273449e+00
  1.56249373e+00  3.22390301e+00  4.90167967e+00
  1.43441442e+00  3.14848137e+00  5.92139779e+00
  1.72273754e+00  3.62515711e+00  6.69946893e+00

...

molecule   98
  3.91267184e+00  7.25536625e+00  3.40343832e+00
  3.40836632e+00  7.83356110e+00  4.04703418e+00
  3.24703403e+00  8.75635518e+00  4.44374622e+00
  2.71743055e+00  8.37636121e+00  3.63629092e+00
  3.29247093e+00  7.94176856e+00  2.97669836e+00
  2.87062437e+00  7.75429047e+00  2.05193491e+00
  3.33123077e+00  8.59400058e+00  1.80985602e+00
  2.61636514e+00  9.21126988e+00  2.12644264e+00

molecule   99
  9.32581173e+00  2.28316281e+00  8.09347078e+00
  8.54585077e+00  2.82356535e+00  7.91968649e+00
  8.46939461e+00  2.34798670e+00  8.77272425e+00
  8.94179414e+00  1.44347001e+00  8.88625674e+00
  9.53256349e+00  8.50956814e-01  9.44624975e+00
  9.19251735e+00  1.01757714e+00  1.03719471e+01
  8.23185421e+00  1.14938280e+00  1.01866746e+01
  7.59823517e+00  1.26913322e+00  4.16994176e-01

\endcode
The configuration file has two sections, which begin with the keywords BOUNDARY and ATOMS.

The BOUNDARY section contains a single line that contains the dimensions of the periodic unit cell.  This line starts with a key word that describes the symmetry of the unit cell (i.e., the lattice system). Currently, this may have values "cubic", "tetragonal" or "orthorhombic". This is followed by one or more unit cell dimensions. Only one cell dimension is given for a "cubic" cell, two for a "tetragonal" cell and three for an "orthorhombic" cell. For a tetragonal cell, the first length is the unique direction, which aligned along the x (0 index) direction, and the second is the length along the y and z (1 and 2) directions, which must be equal. 

The ATOMS section contains a set of sub blocks, one per each species listed in the parameter file, which appear in the order that they appear in the parameter file. The value of the variable nMolecule near the beginning of each species block must be less than or equal to the "capacity" specified for that species in the parameter file, which specifies the amount of memory that has been allocated for molecules of that species, which is maximum allowable number of such molecules. The atomic positions are listed in blocks, where each block contains the number of atoms in one molecule of the enclosing species, as specified by the parameter file.    

The default file format for an MD simulation is similar, except that it includes Cartesian velocity components for each atom as well as coordinates.  In the default MD format, information for each atom thus contains 6 floating point numbers the first of which contains the x, y, and z position coordinates, and the second of which contains the corresponding velocity components.  This is normally output on two lines (one for the position and the second for the velocity) but newlines and other whitespace are ignored when the file is read. 

\section ddMd_config_sec Default format for ddSim
The default configuration file format for a parallel ddSim simulation differs from those used by mcSim or mdSim in several ways. First, all of the atoms in the simulation are  listed in a single block, in which atoms records may appear in random order, and in which each atom is identified by an index. Second, the file format contains blocks that specify which atoms interact via 2-body covalent bonds, and (if angle and dihedral potentials are enabled) which groups of atoms interact via covalent 3-body angle and 4-body dihedral interactions. 

Here is an example of this format for a simulation of 18816 atoms with covalent bonds but no angle or dihedral potentials. Ellipses (...) indicate parts of the file that are not shown. The file format is discussed in more detail below the example. 

\code
BOUNDARY

cubic     2.99554900000000011e+01 

ATOMS
nAtom     18816
     14123     0  2.56428783740099220e+02  3.07444074115559204e+02  8.51193377673758960e+02
                 -4.08072332936156856e-02 -5.19010337554991930e-01 -2.16335790652661286e+00
     11096     0  2.10365950961869117e+02  1.64429781905874762e+02  8.43008681769168675e+02
                 -6.72885653226269365e-01  5.01860663493273518e-01 -1.20808545732924832e+00
      4721     0  1.75580314074003553e+02  1.25456321811122407e+02  1.84867592273157641e+02
                  8.75308535477652527e-01 -5.18460754871245100e-01 -1.64768705338047328e+00
      6128     0  3.19220629376087118e+02  2.13170924566120334e+02  1.08663944538786055e+02
                  1.39476257273902360e+00  5.16921143007741613e-01  3.58348102812755531e-01
      9215     0  1.19680527929475900e+02  1.06807001108581176e+02  8.77746982893537051e+02
                  7.54361874388792264e-02 -1.39920796083611809e+00 -2.12113042761668069e+00
     12118     0  3.07256766974128027e+02  8.24940543667873669e+01  7.98021115544575309e+02
                 -1.07915788193894691e+00  1.60511886035968304e-01  7.44608072625447259e-02
      6466     0  2.73893653793547060e+02  3.76427318565598227e+02  4.92662154584357808e+01
                 -1.05007200221628128e+00  1.05534655499107988e+00 -7.46809583699044266e-01
       169     0  2.84317237870252200e+02  1.93498398613223799e+02  8.92835687786564449e+02
                 -5.37782794753915550e-01 -1.82995161027978104e+00 -2.08377194421038681e+00

     ....

     11738     0  4.51627036188606155e+02  8.94496160214628617e+02  3.75636171990388675e+02
                 -4.81946517319859324e-01 -1.28098425002237254e-01  2.08764379865460037e-01
      6356     0  8.49272882735425583e+02  8.96921620395465993e+02  2.48164782717677468e+02
                 -8.74415116151163740e-01  1.74438540249802293e-01  1.16390736410845430e+00
      9838     0  7.14875924438397078e+02  4.48923775590217190e+02  5.49289926824888084e+02
                 -1.01947174788456363e+00 -9.83877735380550150e-02 -1.26949138864134503e+00
     16502     0  6.20381510014846299e+02  4.51058969662778566e+02  1.14123178050831584e+02
                 -1.68727057532879687e+00  7.79415908560046167e-01 -9.28887789717460888e-01
     13723     0  4.84180184076479918e+02  4.49577560034870146e+02  4.88214904037795407e+02
                  1.33528711699286240e+00  5.41743443955003068e-01 -2.81660195632223387e-01
      9831     0  7.14607023938095722e+02  4.50121452773055182e+02  6.94816783853526317e+02
                 -1.34006212724905605e+00  1.65342061101135385e+00  1.10934779819957496e+00

BONDS
nBond     18228
      4445         0      4588      4589
      5461         0      5637      5638
     15058         0     15543     15544
       107         0       110       111
      9638         0      9948      9949
        93         0        96        97
        94         0        97        98
        95         0        98        99
        96         0        99       100
     15893         0     16405     16406

     ...

      2269         0      2342      2343
     11372         0     11738     11739
      8333         0      8601      8602
      5298         0      5468      5469
     16506         0     17038     17039
       690         0       712       713
      6800         0      7019      7020
      1938         0      2000      2001
      6951         0      7175      7176
      2912         0      3005      3006
     13295         0     13723     13724
\endcode
This file contains three blocks, which are identified by the keywords BOUNDARY, ATOMS, and BONDS.

The format of the BOUNDARY section is identical to that of an mcSim or mdSim configuration file.

The ATOMS section contains an unordered list of records for atoms. In this example, the information for each atom has been formatted using two lines. Each atom record contains, in this order, an integer identifier, an atom type identifier, a position vector (3 floating point numbers), and a velocity vector (3 floating point numbers). Atoms may appear in any order, but each atom may appear only once.

The BONDS sections contains a list of records for different covalent bonds. In the above example, each bond record is on a different line. As for atoms, bonds may appear in any order, but each bond should only appear once. Each bond record contains, in this order: a unique identifier for the  bond, a bond type identifier, and the identifiers of the two atoms that are connected by the bond. 

In a simulation that contains angle and/or dihedral potentials this would be followed by sections
entitled ANGLES and DIHEDRALS, each of which has a format analogous to that used for BONDS.

\section change_config_sec Using non-default config file formats

The configuration file formats described above are used by default for both reading and writing configuration files. Other formats may be selected for any simpatico program by adding a SET_CONFIG_IO command in the command file.  The SET_CONFIG_IO command takes one string argument that specifies a configuration file format. For example, adding the line
\code
   SET_CONFIG_IO LammpsConfigIo
\endcode
to a command file for any simpatico simulation program (mcSim, mdSim or ddSim) will set the program to read and write configuration files using the Lammps data file format. The argument of the SET_CONFIG_IO command is actually the name of a class that implements a configuration file format, which must be a subclass of McMd::ConfigIo for mcSim or mdSim or of DdMd::ConfigIo object for ddSim.   

The SET_CONFIG_IO command creates an instance of the specified class that will be used for all subsequent operations that read or write configuration files, until another SET_CONFIG_IO command is encountered. By inserting a SET_CONFIG_IO command just before a subsequent WRITE_CONFIG, you may specify a new file format for the final output configuration file. A command file that contains only SET_CONFIG_IO, READ_CONFIG and WRITE_CONFIG commands can be used to convert between file formats.
 
ConfigIo file classes available for use in mcSim and mdSim programs, are:

   - McMd::MdConfigIo (default for mdSim)
   - McMd::McConfigIo (default for mcSim)
   - McMd::LammpsConfigIo (lammps data format)
   - McMd::DdMdConfigIo (default for ddSim)


Configuration file classes available for use in ddSim simulations are:

   - DdMd::DdMdConfigIo (default for ddSim)
   - DdMd::DdMdConfigIo (default format, sequentially ordered atom ids)
   - DdMd::LammpsConfigIo (lammps data format, sequentially ordered atom ids)


The string that is passed to a SET_CONFIG_IO command should not include a namespace qualifier, i.e., it should be LammpsConfigIo rather than McMd::LammpsConfigIo or DdMd::LammpsConfigIo.

The McMd::DdMdConfigIo and McMd::LammpsConfigIo classes can be used in mcSim or mdSim simulations to produce configuration files that can be read by ddSim, to initialize a parallel MD simulation. The serial mcSim and mdSim programs can thus be used to create partially equilibrated initial configurations for longer parallel MD simulations. 

Because the data structures used in the ddSim parallel MD program are signficantly different from those used in mcSim and mdSim, mcSim and mdSim can currently read ddSim and lammps configuration files only if the configuration files obey a restrictive convention regarding the ordering of atom ids. This convention is discussed in the class documentation for McMd::LammpsConfigIo and McMd::DdMdConfigIo. The DdMd::DdMdOrderedConfigIo and DdMd::LammpsConfigIo are designed to produce configuration files with sequentially ordered atom ids that can be read by mdSim and mcSim. The default DdMd::DdMdConfigIo format does not write files with sequentially ordered atom ids, and so avoids the cost in time and memory of assembling an ordered list of atoms from data that is initially distirbuted over many processors.

An mdSim MD simulation can be instructed to read an output file created by an earlier mcSim MC simulation by adding a command "SET_CONFIG_IO McConfigIo" before the READ_CONFIG command.  Because the default MC file format does not contain any information about velocities, however, this pair of commands would normally be followed in the file for an MdSimulation by a THERMALIZE command, to generate random velocities chosen from a Maxwell-Boltzmann distribution.
 
 <BR>
 \ref user_command_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
 \ref user_page     (Up)  &nbsp; &nbsp; &nbsp; &nbsp; 
 \ref user_example_page   (Next) 
*/
