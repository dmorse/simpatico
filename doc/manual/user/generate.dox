/*! \page user_generate_page 3.11 Generating Initial Configurations

\ref user_analysis_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_restart_page (Next)
<BR>

The mcSim MC program can be used to generate a random initial configuration, using the GENERATE_MOLECULES command. 
This command attempts to place molecules in a random configuration in which there is no overlap between atoms, when atoms are treated as hard spheres with diameters that are specified as parameters of the command, and in there are no excessive intramolecular covalent bonding energies.

\section user_generate_syntax_section Command syntax

The syntax of the GENERATE_MOLECULES command is:
\code
  GENERATE_MOLECULES (Boundary) Capacities: (int list) Diameters: (real list)
\endcode
Here, the strings "GENERATE_MOLECULES", "Capacities:" and "Diameters:" are required labels. The symbols (Boundary), (int list) and (real list) instead denote input parameter values, as discussed below.

The (Boundary) parameter specifies the dimensions of the periodic unit cell using the text file format specified by the "))" operator for the boundary class. For the default Simp::OrthorhombicBoundary class, this format contains a lattice system string chosen from among "cubic", "tetragonal" and "orthorhombic", followed by an appropriate number of independent unit cell dimensions (i.e., one for cubic, two for tetragonal, and three for orthorhombic). 

The label "Capacities:" is followed by a list of integers, denoted above by (int list).  Each value in this list specifies how many molecules of the corresponding species should be generated, listed in the same order as the order in which species are listed in the parameter file.  The number of values in this list must thus be equal to the number of species listed in the SpeciesManager block of the parameter file.

The label "Diameters:" is follows by a list of real numbers.  Each value in this list specifies the hard core diameter for a corresponding atom type, listed in the order in which atom types are listed in the parameter file. The number of diameter values must thus equal the number of atom types in the parameter file. The diameter values specified in this command are only used during generation of initialconfigurations, and have no effect on the pair potential used during any subsequent simulation. 

The GENERATE_MOLECULES attempts to place molecules sequentially in a position that does not cause any overlap with atoms of previously generated molecues. 
This algorithm can fail if the atomic diameter values are too large, in which case the program will output an appropriate error message and halt execution. 
If this happens, the user should reduce some or all of the atomic type diameters and try again. 

\section user_generate_example_section Example

A minimal command file to generate a configuration with two species of molecules and three types of atoms in a cubic box might look like:
\code
  GENERATE_MOLECULES cubic 29.0 Capacities: 100 1400 Diameters: 0.3 0.3 0.3
  WRITE_CONFIG       config
\endcode
In this example, the GENERATE_MOLECULES command would generate an initial configuration within a cubic unit cell of length 29.0 that contains 100 molecules of species 1 and 1400 molecules of species 2, using hard-core diameters of 0.3 for each of three atom types. 

\section user_generate_algorithms_section Algorithms

An algorithm that should be used to place molecules of each species (corresponding subclass of Simp::Species) is predefined for each species, and can be different for different species.
Each subclass of Simp::Species that can be generated as part of a random initial configuration must be associated with a corresponding "generator" class, which must be a subclass of the McMd::Generator base class.
For example, all linear polymers (Simp::Linear and its subclasses) are generated by the McMd::LinearGenerator class, which uses a configuration bias growth algorithm with rejection of growth steps that would cause overlaps. 
The Simp::Species base class cannot be used to generate an initial configuration, because simpatico does not provide a generator algorithm that is general enough to allow use with any type of molecule.

<BR>
\ref user_analysis_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_page (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_restart_page (Next)

*/
