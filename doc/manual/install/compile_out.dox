/*! \page install_compile_out_page 2.7 Compiling (Out-of-Source)

\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_in_page (Next) 
<BR>

We recommend that most users perform an out-of-source build of simpatico.
To compile simpatico out-of-source, after completing all of the required 
setup and configuration steps, one simply invokes the "make" utility 
with appropriate targets from the simpatico/ root directory. The 
\ref install_overview_page "overview of instructions" given on a
previous page included instructions for compilng simpatico out-of-source.  
On this page, we simply repeat these instructions with a bit more 
explanation of what each makefile target should do.

\section compile_mcMd_section Compiling mcSim and mdSim 

The first step in compiling simpatico should be to compile the 
single-processor versions of the mcSim and mdSim programs.  Because these 
programs are standard C++ with no external dependencies, they can be 
compiled whether or not you have set up your environment for compiling 
MPI code, and generally compile with no difficulties. After setting 
environment variables, running the setup script, and making any desired 
changes in the configuration, simply cd to the simpatico/ root directory 
and then enter:
\code
> make mcMd
\endcode
This command will:

  - Compile a large number *.cpp files in the util/, simp/ and mcMd/ 
    namespace-level subdirectories of the simpatico/src/ source code 
    directory.

  - Install corresponding object (*.o) and dependency (*.d) files in 
    corresponding locations within the simpatico/bld/serial directory.

  - Create a static library (with file extension *.a) in each of these 
    three namespace-level subdirectories of the bld/serial directory.

  - Install executable files named mcSim and mdSim in the simpatico/bin 
    directory. 

To recompile these programs after changing the configuration (e.g., after 
using the configure script to enable or disable compilation of particular 
features), simply reissue the "make mcMd" command. The build system will 
detect if you have changed any of the relevant configuration files, and 
will recompile any file that might be effected by such changes.

\section compile_mdPp_section Compiling the mdPp MD post-processor

The mdPp post-processor program is another a single-processor program that 
you can compile before setting up your system to compile MPI programs.  To 
do so, cd to the simpatico/ root directory and enter:
\code
> make mdPp
\endcode
If this is done after compiling mcSim and mdSim, this will compile some 
additional code in src/mdPp directory, place *.o and *.d files in the 
simpatico/bld/serial/mdPp directory and install an executable named 
mdPp in the simpatico/bin directory. 

\section compile_ddMd_section Compiling ddSim

To compile the ddSim parallel MD program, after setup, configuration of 
simpatico, and configuration of MPI, simply enter 
\code
> make ddMd
\endcode
from the simpatico/ root directory.  If successful, this will compile 
code from the util/, simp/, and ddMd/ subdirectories of the src/ 
directory, place object, dependency and library files in the 
simpatico/bld/parallel directory tree, and install an executable named 
ddSim in the simpatico/bin directory. 

\section compile_multi_section Compiling mcSim and mdSim (multi-processor versions)

Multi-processor versions of mcSim and mdSim can be used to run:

  - Multiple independent single-processor simulations as an MPI job, with 
    completely separate input and output files

  - Multiple simulations with a sequence of parameter values specified in 
    a single parameter file, using the perturbation feature.

  - Perform replica exchange simulations

To compile multi-processor versions of mcSim and mdSim, enter:
\code
> make mcMd-mpi
\endcode
from the simpatico/ root directory.  If invoked after compiling ddSim, 
this will compile MPI-enabled version of files in the mcMd/ directory,
place the resulting object, dependency and library files in the
bld/parallel/mcMd directory, and create executable files named mcSim_m 
and mdSim_m in the simpatico/bin/ directory. The suffix "_m" on these 
executable names denotes "MPI", and is used to distinguish multi-processor 
versions of the mcSim and mdSim executables from single processor versions.

\section compile_cleanup_section Cleaning up

If, for any reason, you would like to clean up after compiling by removing 
all of the object, dependency and library files that are generated during 
compilation, enter
\code
> make clean
\endcode
from the simpatico root directory. This will remove any files generated by 
compilation in the bld/serial, bld/parallel and src/ directories.

If you want to remove generated files from only one build directory
(e.g., from bld/parallel, but not bld/serial or src/), simply enter
"make clean" from the root of that build directory (e.g., from the
bld/parallel directory), rather than from the simpatico/ root 
directory. 

Entering "make clean" from a namespace level subdirectory of any build 
directory will instead remove all generated files from that subdirectory, 
without effecting files in other subdirectories.

\section compile_veryclean_section Reverting to initial state

The "make clean" command discussed above removes files that are generated 
by compilation, but does not remove the various makefile fragments and 
C++ files that are installed prior to compilation by the "setup" script. 
To remove these files as well, and thus return the simpatico/ directory 
tree to a state close to the  state it had immediately after the repository 
was cloned, instead enter 
\code
> make veryclean
\endcode
from the simpatico/ root directory. 

Because the "make veryclean" command removes files that are created 
by the setup script, you will need to rerun the setup script after
"make veryclean" before attempting to compile any code.  The "veryclean" 
target does not, however, erase any local compiler setup files that
the user may have created in the make/compiler directory. After 
invoking "make veryclean", a user can thus invoke setup with the name 
of a previously created compiler configuration file as an argument in
order to recreate the same configuration.

After invoking "make veryclean" and then calling the setup script, 
but before compiling, the user may also need to invoke the configure 
script to re-enable any desired non-default compile time options.

<BR>
\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_in_page (Next) 

*/
