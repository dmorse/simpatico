/*! \page install_compile_in_page 2.8 Compiling (In-Source)

\ref install_compile_out_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_configure_page (Next) 
<BR>

The simpatico build system allows a user to perform in-source compilation 
of some or all of the source code. This ability is provided as a convenience 
to developers who prefer to be able to compile some or all of the code from 
the unix command line without leaving the directory tree in which they are 
editing source code files.

\section install_insource_src_sec Invoking make from the src/ directory

To peform a complete in-source build of any of the simpatico programs, one 
may simply invoke the make utility from the src/ directory rather than from 
the simpatico/ root directory, using the same makefile target name as that 
used to perform of an out-of-source build when invoking make from the 
simpatico/ directory.  Thus for example, to peform an in-source build of 
mcSim and mdSim, one may simply invoke "make mcMd" from the src/ directory. 
The relevant makefile targets, for either in-source or out-of-source builds, 
are:

   - "make mcMd" builds mcSim and mdSim

   - "make mdPp" builds mdPp

   - "make ddMd" builds ddSim

   - "make mcMd-mpi" builds mcSim_m and mdSim_m

Recall that mcSim_m and mdSim_m are the multiprocessor versions of the 
mcSim and mdSim programs. When invoked from the src/ directory, each of 
these targets will cause make to place object, dependency and library 
files in the simpatico/src/ directory tree and then install the resulting
program or programs in the simpatico/bin directory by default. 

\section install_insource_makeall_sec Invoking "make all" from a subdirectory

It is also possible to invoke make from a subdirectory of src/ in order to 
compile a smaller set of source files. Invoking the command 
\code
 > make all
\endcode
from almost any subdirectory of the src/ directory tree  will compile all 
C++ files in the tree rooted at that subdirectory, without compiling any 
code outside of that subdirectory.

Invoking "make all" from any namespace level subdirectory of src/ 
(i.e., from the src/util, src/simp, src/mcMd, src/ddMd or src/mdPp 
directory) will cause make to compile all the *.cpp source files in
the namespace level directory tree, create a library containing all
of the resulting object code, and compile and install any main
programs for which the source files are in that directory. 

Invoking "make all" from any subdirectory of a namespace level 
directory of src/ will cause make to compile all of the source files 
in that subdirectory, including any in lower level subdirectories.

The ability to invoke "make all" from any subdirectory of src/ is
designed to allow developers to easily recompile a few files from
the command line from within the directory in which they are working. 
Typically, when a developer is adding a new feature or fixing a bug, 
he or she will be actively editing only a few files within some 
subdirectory of the source directory, while the other files in 
that directory are left untouched. Under these circumstances, if 
all files other than the ones that were recently modified have
already been compiled, invoking "make all" from the directory 
containing the files of interest will only recompile source files 
that have recently been modified or that include header files 
that have recently been modified. 

\section install_insource_mpi_sec Managing MPI settings

Users should be aware of one complication that arises when both serial 
and parallel simpatico programs are built in the src/ directory. The 
simpatico package contains both serial programs that do not use MPI 
(the mcSim, mdSim and mdPp programs), and several parallel programs that 
do use MPI (the ddSim program and the parallel versions of mcSim and 
mdSim). These two sets of programs are constructed from many of the same 
C++ classes, but the source files for these classes must be compiled with 
different compiler options for use in serial and parallel programs. All 
simpatico C++ source files used by a parallel MPI program must be compiled 
with MPI enabled by the build system. Conversely, all C++ files used by 
serial programs must be compiled with MPI disabled.

When a user compiles part of the source code by invoking "make all" 
from any subdirectory of the src/ directory, he or she is responsible
for explicitly making sure that MPI is enabled or disabled, as needed, 
before attempting to compile. One can determine whether MPI is currently
enabled or disabled, and enable or disable it as needed, by invoking
the \ref install_configure_page "configure" bash script from the src/ 
directory with appropriate options. To determine whether MPI is currently 
enabled, cd to the src/ directory and then enter
\code
   > ./configure -q
\endcode
This should cause a list of optional compile time features to be listed, 
along with an indication of whether each is currently enabled (ON) or 
disabled (OFF). Among the listed features is "MPI".  To disable MPI, 
if necessary, one may then enter
\code
   > ./configure -m0
\endcode
from the src/ directory.
To enable MPI, instead enter
\code
   > ./configure -m1
\endcode
from the src/ directory. Invoking the configure script with the -m option 
from the src/ directory enable or disable MPI for all code that is 
compiled in-source (i.e., that is compiled by invoking make from within 
the src/ directory tree). 

It is generally not necessary for a user to explicitly enable or disable 
MPI before compiling a program by invoking make from the src/ directory, 
rather than from one of its subdirectories.  When the make utility is 
invoked from the src/ directory with one of the main makefile targets 
that build one or more executable programs (e.g., "mcmd", "mcMd-mpi", 
"ddMd", or "mdPp"), the makefile system automatically disables MPI as
the first step of attempting to build any serial program, and disables 
MPI as the first step of building any parallel program.  

The need to manage the MPI compile-time option can make in-source
compilation inconvenient if one needs to switch frequently between 
working on serial and parallel program.  If a user invokes make from 
the src/ directory to first build a serial program or programs (e.g., 
by invoking "make mcMd" to build mdSim and mcSim) and then uses a 
different target to build a parallel program (e.g., by invoking 
"make ddMd" to build ddSim), the build system will have to compile
all the files are shared by both serial and parallel programs twice,
once with MPI disabled and once with MPI enabled. When this happens, 
the object files created during compilation of the serial programs
will be overwritten when they are recompiled during compilation of a
parallel program, thus losing all the effort that went into compiling 
serial versions of these files. If one were to then recompile a serial 
program, all of these shared files would then have to recompiled once 
again, even if none of the shared files had been modified.  This 
problem does not arise when code is compiled out-of-source, because 
in this case object files created during compilation of serial and 
parallel programs are stored in different directory trees.  To avoid 
this problem, developers should either avoid going back and forth 
frequently between work on serial and parallel programs when compiling 
in-source, or use out-of source compilation during development.

<BR>
\ref install_compile_out_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_configure_page (Next) 

*/
