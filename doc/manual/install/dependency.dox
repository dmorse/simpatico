/*! \page install_dependency_page 2.11 Dependency Generation

\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
<BR>

\section install_configure_dependency_section Automatic dependency generation

By default, the simpatico build system automatically generates a 
"dependency" file, with a suffix *.d, whenever it compiles a *.cpp source 
file. The dependency file is placed in the build directory tree in same 
directory as the corresponding object *.o file. The dependency files are 
used by the build system to decide what files need to be recompiled after 
the user modifies either a C++ file or a configuration file.

The system for generating dependency files uses the g++ compiler, which 
does the actual analysis of dependencies among C++ files. It also uses
a python script named simpatico/scripts/python/makeDepend.py to do some
text processing on the list of dependencies produced by the compiler. 
To function correctly, this system requires that:
 
  - A g++ compiler (or a link with this name) must be in the user's 
    PATH environment variable

  - A python interpreter must be in the user's PATH 

  - The simpatico/scripts/python/ directory must be in the PYTHONPATH 
    environment variable

The build system requires that a g++ compiler is available because the g++
compiler is used for dependency analysis even if another compiler (e.g., 
the intel compiler) is used for compilation. A g++ compiler and python 
interpreter is normally available on any modern linux distribution, and 
on any Mac OS X environment that is correctly set up for C++ development.

Automatic generation of dependency files is an essential feature for 
developers - It makes it possible to safely rebuild a program after you 
modify a few C++ files or configuration files, and have the build system 
recompile only what needs to be recompiled.  It is possible to disable 
automatic dependency generation in any build directory by entering 
"./configure -k0" from the root of that build directory, but we strongly
recommend against doing so.

<BR>
\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
*/
