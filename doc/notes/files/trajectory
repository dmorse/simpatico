SIMPATICO TRAJECTORY FILE FORMAT

   File extension *.smt

   Remarks:

   1) This is a binary file format, which should be as compact as 
   possible. 

   2) Each frame should contain mutable per-atom data (no topology info)

   3) Question: Should a file consists of a sequence of independent 
   frames, with no header, or should it have a header? Proposal: 
   The header is optional, and some information in header can be
   overridden by info in a frame. Require that all required information
   be provided somewhere.

   4) The header, if any needs to provide information about atom
   types (if any) and immutable bonding. Atom type information 
   is necessary if the simulation requires atom masses (for MD)
   or charge (for charged systems). The header should provide
   default values for these even if additional information is
   provided on a per atom basis.

   5) Information in the header about bonding/topology is optional
   may be provided either in the form of information about species, 
   for molecular systems, or lists of covalent groups.

   6) If a trajectory file has no header, a postprocessor may be 
   required to read a param and/or config file to obtain information 
   about mass and charge associated with types. The mcSim and mdSim 
   programs can also obtain topology information from a param file, 
   cannot. The postprocessor needs bool variables to indicate whether 
   it has atomType (mass and charge) and and topology information.

FORMAT:

   Header (if any):

      [ATOMTYPE] 
      ar >> hasAtomTypes;
      if (hasAtomTypes) {
         hasMass
         hasCharge
         nAtomType
         For each atom type{
            [mass], [charge]
         }
      }

      Note: Default values for mass and/or charge must be specified 
      for types, but can be overridden by information about atoms.

      [SPECIES]
      ar >> hasSpecies;
      if (hasSpecies) {
         ar >> nSpecies
         for each species {
            read species
            increment nAtom
         }
      }
      ar >> nAtom_;

      [BOND] - optional, allowed only if SPECIES is absent
      [ANGLE] - optional, allowed only if SPECIES is absent
      [DIHEDRAL] - optional, allowed only if SPECIES is absent

      Notes:

         1) Topology should either be specified by a [SPECIES] block
         or by a subset of [BOND], [ANGLE] and [DIHEDRAL] blocks.
         Use of both is an error.

   Frame:

      Principles: 

         - A frame should be self-describing
         - A frame can contain as little as atomic positions
         - Info about atomtype that is given in a frame has 
           priority over that given in the header to allow
           mutability of these properties in some simulation types.

      ar >> iStep
      ar >> boundary
      ar >> isOrdered
      ar >> hasAtomId
      ar >> hasAtomContext
      ar >> hasAtomTypeId
      ar >> hasAtomVelocity
      ar >> asAtomShift

      ar >> nAtom (total number of atoms)
      For each atom {
         [id] [context] [type] position [velocity] [shift]
      }

      Remarks:

      1) No id if atoms are declared isOrdered
      2) Position is stored in scaled coordinates, as 3 x uint
      3) Velocity, if any, is 3 x single precision float
      4) Shift, if any, is 3 x small int

      Comment: The format allows type mutability to allow semi-grand 
      algorithms. Changes in type can be used to create changes in 
      charge, mass, interaction parameters, etc. Atom type id should
      be not be include in a frame otherwise.

