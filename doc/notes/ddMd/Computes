Proposal: Introduce scheme for organizing computed quantities, in a form that 
can be accessed by analyzers that output results or calculate statistical
properties. Inspired by "Compute" class hierarchy in Lammps and Hoomd-Blue.

This would generalize the idea of a "Setable" to provide a function to 
allow computation of the quantity.  Each class that currently owns or has 
responsibility for a Setable function would instead provide access to the 
corresponding "Compute" subclass. The compute class would provide a pure 
virtual "compute" method, public methods to clear or unset the value, and 
a protected method to set the value, which can be called in the 
implementation of the compute method. 

Make Compute a template, which can be applied to double, Vector, Tensor or 
even a DArray of any of these. 

-------------------------------------------------------------------------
Compute class hierarchy:

class Compute
{

public:

   /// Compute the quantity
   virtual void compute() = 0;

   /// Unset the value
   virtual void unset() = 0;

   /// Query whether the value is set.
   virtual bool isSet() = 0;

   /// Return a pointer to an Accessor<T> of appropriate type T.
   template <T>
   Accessor<T>& accessor()
   {
      Accessor<T>* ptr = dynamic_cast< Accessor<T> >(this);
      // Add error checking.
      return *ptr;
   }

}

template <typename T>
class Accessor : public Compute 
{

public:

   /// Access the value
   const T& value() = 0;

}

template <typename T>
class AccessorTemplate : public Accessor<T>
{

public:

   /// Access the value.
   const T& value()
   {  return data_.value(); }

   virtual void unset()
   {  data_.unset(); }

   virtual bool isSet()
   {  return data_.isSet(); }

protected:

   Setable<T>& data()
   {  return data_; }

private:

   Setable<T> data_;

}

Note: The implementation of the compute() function would have access to the 
set and assignment operators of data_, either of which could be used to set 
the value. 

Often, a compute would be associated with a parent class that is naturally
responsible for computation of the value, such as a potential energy class
or the main Simulation class. In order to provide a single interface for
computing a quantity, the parent class could provide a private function 
for the computation, but then be declared a "friend" of the compute class.
The private compute method of the potential energy or Simulation class
could then be called by the public "compute()" method of the associated
Compute sublcass, which could also set the value of the associated Setable
object. This would be functionally equivalent to the current arrangement 
of providing private "Setable" objects, but would provide a standard
interface for manipulating each computable value, reduce the number of
functions in the main object, and allow the design of a container to 
Manage all computed quantities available for logging or analysis. 

-------------------------------------------------------------------------
class ComputeManager:

 - Provides methods that provide access to a compute by name or by index.

