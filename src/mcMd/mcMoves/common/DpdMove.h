#ifndef MCMD_DPD_MOVE_H
#define MCMD_DPD_MOVE_H

/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2012, David Morse (morse012@umn.edu)
* Distributed under the terms of the GNU General Public License.
*/

#include <mcMd/mcMoves/SystemMove.h>  // base class
#include <util/containers/DArray.h>   // member template
#include <util/space/Vector.h>         // member template parameter

namespace McMd
{

   using namespace Util;

   class McSystem;
   class MdSystem;


   /**
   * DpdMove is a short dissipative particle dynamics (DPD) simulation.
   *
   * An DpdMove simply runs a (typically) short DPD MD simulation. Unlike the
   * MdMove and HybridMd move, it does not generate new initial velocities at
   * the beginning of the move, but simply uses the existing atomic velocities
   * generated by previous hybrid moves. Also, unlike the HybridMd move, it
   * does not rigorously satisfy detailed balance, and is rigorously correct
   * only in the limit of vanishing time step dt.
   *
   * \ingroup McMd_McMove_Module MD_Module
   */
   class DpdMove : public SystemMove
   {

   public:

      /**
      * Constructor.
      *
      * Constructs a component MdSystem object.
      */
      DpdMove(McSystem& system);

      /**
      * Destructor.
      */
      ~DpdMove();

      /**
      * Read nStep, dt, skin, maxNPair from file.
      */
      virtual void readParameters(std::istream& in);

      /**
      * Initialize before a run.
      */
      virtual void setup();

      /**
      * Generate, attempt and accept or reject a move.
      */
      bool move();

   private:

      /// MdSystem object used for MD integration
      MdSystem      *mdSystemPtr_;

      /// Number of Md steps per Hybrid MD move
      int            nStep_;

   };

}
#endif
