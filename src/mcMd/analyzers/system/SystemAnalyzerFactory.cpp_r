/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2017, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include "SystemAnalyzerFactory.h" // Class header

// Analyzers for any System (Mc or Md)
#include <mcMd/analyzers/simulation/LogProgress.h>
#include "ConfigWriter.h"
#include "AtomMSD.h"
#include "RDF.h"
#include "StructureFactorP.h"
#include "StructureFactorPGrid.h"
#include "StructureFactor.h"
#include "StructureFactorGrid.h"
#include "VanHove.h"
#include "BoundaryAverage.h"
#include "ClusterHistogram.h"

#ifdef SIMP_BOND
#include "RadiusGyrationSq.h"
#include "BlockRadiusGyration.h"
#include "BondLengthDist.h"
#include "IntraStructureFactor.h"
#include "IntraStructureFactorGrid.h"
#include "ComMSD.h"
#include "IntraPairAutoCorr.h"
#include "RingRouseAutoCorr.h"
#include "LinearRouseAutoCorr.h"
#endif

#ifdef SIMP_DIHEDRAL
#include "DihedralDist.h"
#endif

#ifdef MCMD_PERTURB
#ifdef UTIL_MPI
#include <mcMd/analyzers/perturb/BennettsMethod.h>
#endif
#include <mcMd/analyzers/perturb/PerturbDerivative.h>
#endif

namespace McMd
{

   using namespace Util;

   /*
   * Constructor.
   */
   SystemAnalyzerFactory::SystemAnalyzerFactory(Simulation& simulation, 
                                            System& system)
    : simulationPtr_(&simulation),
      systemPtr_(&system)
   {}

   /* 
   * Return a pointer to a instance of Species subclass className.
   */
   Analyzer* SystemAnalyzerFactory::factory(const std::string &className) const
   {
      Analyzer* ptr = 0;

      if (className == "LogProgress") {
         ptr = new LogProgress();
      } else
      if (className == "ConfigWriter") {
         ptr = new ConfigWriter(system());
      } else
      if (className == "RDF") {
         ptr = new RDF(system());
      } else 
      if (className == "StructureFactorP") {
         ptr = new StructureFactorP(system());
      } else 
      if (className == "StructureFactorPGrid") {
         ptr = new StructureFactorPGrid(system());
      } else 
      if (className == "StructureFactor") {
         ptr = new StructureFactor(system());
      } else 
      if (className == "StructureFactorGrid") {
         ptr = new StructureFactorGrid(system());
      } else 
      if (className == "BoundaryAverage") {
         ptr = new BoundaryAverage(system());
      } else 
      if (className == "AtomMSD") {
         ptr = new AtomMSD(system());
      } else
      if (className == "VanHove") {
         ptr = new VanHove(system());
      } else
      if (className == "ClusterHistogram") {
         ptr = new ClusterHistogram(system());
      } 

      #ifdef SIMP_BOND 
      else
      if (className == "IntraStructureFactor") {
         ptr = new IntraStructureFactor(system());
      } else 
      if (className == "IntraStructureFactorGrid") {
         ptr = new IntraStructureFactorGrid(system());
      } else 
      if (className == "RadiusGyrationSq") {
         ptr = new RadiusGyrationSq(system());
      } else 
      if (className == "BlockRadiusGyration") {
         ptr = new BlockRadiusGyration(system());
      } else 
      if (className == "BondLengthDist") {
         ptr = new BondLengthDist(system());
      } else 
      if (className == "ComMSD") {
         ptr = new ComMSD(system());
      } else
      if (className == "IntraPairAutoCorr") {
         ptr = new IntraPairAutoCorr(system());
      } else
      if (className == "LinearRouseAutoCorr") {
         ptr = new LinearRouseAutoCorr(system());
      } else
      if (className == "RingRouseAutoCorr") {
         ptr = new RingRouseAutoCorr(system());
      } 
      #endif

      #ifdef SIMP_DIHEDRAL
      else
      if (className == "DihedralDist") {
         ptr = new DihedralDist(system());
      } 
      #endif

      #ifdef UTIL_MPI
      #ifdef MCMD_PERTURB
      else 
      if (className == "PerturbDerivative") {
         ptr = new PerturbDerivative(system());
      } else 
      if (className == "BennettsMethod") {
         ptr = new BennettsMethod(system());
      } 
      #endif
      #endif

      return ptr;
   }

}
