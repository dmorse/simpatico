namespace McMd
{

/*! \page hoomd_page 5 Integration with Hoomd-blue

\ref extend_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_page  (Next)
<BR>

Simpatico supports the use of the Hoomd-blue code for MD on the GPU 
as a simulation engine for hybrid Monte Carlo simulations.  
<a href=http://codeblue.umich.edu/hoomd-blue/>Hoomd-blue</a> stands for
Highly Optimized Object-oriented Many-particle Dynamics -- Blue
Edition. Hoomd-blue is developed by Joshua Anderson at the University
of Michigan and provides Molecular Dynamics algorithms for parallel
execution on GPUs using nVidia CUDA. To use Hoomd-blue for hybrid MC
integration inside Simpatico, an outer Markov-Chain Monte Carlo loop
is effectively wrapped around the core Hoomd-blue MD engine.

Why would you want to use hybrid MC with Simpatico/hoomd-blue instead
of doing pure MD directly with hoomd-blue? The hoomd hybrid MC integration
functions as a regular Monte Carlo move inside Simpatico, and can thus
be combined with all other molecular moves which Simpatico supports on 
the CPU (e.g. end-swap or configuration bias). Because the hybrid MC 
algorithm satisfies detailed balance, it (like all correct MC algorithms)
is free of the small but nonzero error that arises in MD from the use
of a nonzero time step. The combination of the two programs also allows
GPU accelerated hybrid MC to be used together with replica exchange
 / free energy perturbation simulations on a GPU cluster such as 
<a href=http://keeneland.gatech.edu/>Keeneland</a>, to enable 
large-scale GPU simulations on systems with rough free energy 
landscapes.

\section install_prereq_sec Installing Hoomd for use with Simpatico (and other prerequisites)

Hoomd-blue must be installed on the system, and its shared library is
then directly linked to by Simpatico. In this way, Hoomd-blue's Python
interface is circumvented and Hoomd-blue is entirely controlled at the
level of C++ code by the Simpatico main program.  Further, we need Boost 
(e.g. >=1.44.0) and Python (e.g. >=2.6), and the CUDA toolkit (e.g. >= 3.2).

To install Hoomd-blue, simply follow the steps on Hoomd-blue's 
<a href=http://codeblue.umich.edu/hoomd-blue/doc/page_install_guide.html>
Installation page</a>. We recommend using the latest development version 
of hoomd, which can be downloaded from a repository and must then be 
compiled.  However, Simpatico should work fine with the latest stable 
release (0.9.2 at the time of writing).

After installation, there should be a library
\code
/usr/local/lib/hoomd/python-module/hoomd.so
\endcode
where the prefix (/usr/local/) is in this case the location where we
assume Hoomd-blue has been installed. Note this path.

You will (of course) also need a working CUDA toolkit installation (tested
with version 4.0). By default, it is installed in
\code
/usr/local/cuda/
\endcode
Note this path.

Further note the path to the Python installation (which is necessary
even if it is not directly used for integration with Simpatico). The
path to the header files could be, e.g., 
\code 
/usr/include/python2.7
\endcode

Finally, Hoomd-blue integration requires a functioning Boost
installation (e.g. Boost 1.44.0 or later). If boosts Boosts' header 
files are not installed in the default location, where a C++ compiler 
can find them (e.g., /usr/include/boost), note the path to the Boost 
include directory.

\section compiling_hoomd_module_sec Compiling the Simpatico-Hoomd module

Now all prerequisites are met and we can proceed with compiling the Simpatico
module that takes care of Hoomd-blue integration.

Change directory (cd) into the src/modules/hooomd directory, 
\code 
cd src/modules/hoomd
\endcode
and type
\code
./setup
\endcode
This copies the file config.mk_r to <b>config.mk</b>. You can now change this
file to make it reflect the installation paths of Hoomd, CUDA,  Python
and Boost.

Specifically, change the entries
\code
HOOMD_INSTALL_PATH=/usr/local/
\endcode
\code
PYTHON_INCLUDE_PATH=/usr/include/python2.7
\endcode
and
\code
CUDA_INSTALL_PATH=/usr/local/cuda
\endcode
to the correct paths for your system, as needed. If necessary, also change 
the BOOST_INCLUDE_PATH.

You should now be able to compile the Hoomd-blue module for Simpatico
by typing
\code
make all
\endcode 
After this you should have an executable called <b> mcSim_h</b> in the 
bin/ directory (or, e.g. mcSim_m_f_h, if you defined Replica Exchange 
and Free energy perturbation support in src/mcMd/config.mk (See page
about \ref user_multi_McMd_page).

\section using_hoomd_integration_sec Using Hoomd-blue integration

\note Hoomd-blue-integration currently only works with bond and nonbonded
pair potentials
(not with angle, dihedral, link etc. potentials).

Simpatico with Hoomd-blue GPU support takes the same parameter file 
as the CPU version, with the following important difference. For
numerical consistency, it directly uses the Pair potentials provided
by Hoomd-blue for CPU calculations, such as molecular Monte Carlo
moves, as well as for GPU based force calculations. There are 
currently two pair potentials defined, <b>
HoomdLJPair</b> and <b>HoomdDpdPair</b> which take the same parameters
as the corresponding Simpatico classes (LJPair and DpdPair). To use 
the GPU-based hybrid MC move, however, the Hoomd* versions have to 
be used.  Since Hoomd's bond potentials cannot, currently, be used 
inside Simpatico, a Hoomd-blue bond potential is automatically set 
up to match to the choice of the Simpatico bond potential, with
corresponding parameters. Currently, only HarmonicBond and 
HarmonicL0Bond are supported.

The McSystem parameter file block within the parameter file might e.g.
look like this:
\code
  McSystem{
    pairStyle                      HoomdLJPair
    bondStyle                     HarmonicBond
    McPairPotential{
      epsilon               1.00 1.00
                            1.00 1.00
      sigma                 1.00 1.00
                            1.00 1.00
      cutoff                1.122460 1.122460
                            1.122460 1.122460                            
      maxBoundary             orthorhombic 21.0 21.0 21.0
    }
    BondPotential{
      kappa                 4.000000000000e+02
      length                1.000000000000e+00
    }
    ...
  }
\endcode

Finally, we only need to specify the parameters for the Hybrid-MC integration.
For this, a <b>HoomdMove</b> block must be present within the McMoveManager block
of the parameter file. This is Simpatico McMove that use Hoomd-blue to implement
the hybrid MC move. The file format is shown in the following example:
\code
 McMoveManager{
    HoomdMove{
      probability          0.00125
      nStep 1000
      dt    0.005
      skin                  0.4
      GPUId -1
    }
    EndSwapMove{
      probability           0.99875
      speciesId                         0
    }
  }
\endcode
In this example, a <b>HoomdMove</b> and the EndSwapMove have been defined.
The <b>HoomdMove</b> section defines an NVE hybrid MC move on the GPU,
and takes the <b>probability</b> of the move, the
number <b>nStep</b> of MD steps per hybrid MC move, the MD integration time step
<b>dt</b>, and the skin length <b>skin</b> as arguments. Additionally,
it is possible to choose the <b>GPUId</b> for execution (e.g. 0,1,2,..), a value
of -1 is default for automatic GPU detection. 

Finally, we can run the simulation with a <b>commands</b> file like this
\code
GENERATE_MOLECULES 20.77 392 0.45 0.45
SIMULATE        15000000
FINISH
\endcode
and using <b>mcSim_h < param</b>, we get the following output
\code
HOOMD-blue is running on the following GPU:
 [0]           Tesla M2070  14 SM_2.0 @ 1.15 GHz, 5375 MiB DRAM
...

iStep = 0
iStep = 10000
iStep = 20000
...
nStep         15000000
run time      20012.7  sec
time / nStep  0.00133418  sec

Move Statistics:

Move Name                          Attempted    Accepted     AcceptRate
HoomdMove                              18907       10511       0.555932
EndSwapMove                         14981093     5780612       0.385860

FINISH
\endcode


<BR>
\ref extend_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref index "Main Page"  (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_page  (Next)

*/

}
