/*
* Simpatico - Processor Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2017, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include "ProcessorAnalyzerFactory.h" // Class header

#include <mdPp/processor/Processor.h>

// Analyzers 
#include <mdPp/analyzers/LogStep.h>
#include <mdPp/analyzers/LammpsDumpWriter.h>
#include <mdPp/analyzers/PairEnergy.h>

namespace MdPp
{

   using namespace Util;

   /*
   * Constructor.
   */
   ProcessorAnalyzerFactory::ProcessorAnalyzerFactory(Processor& processor)
    : processorPtr_(&processor)
   {}

   /* 
   * Return a pointer to an instance of Analyzer subclass className.
   */
   Analyzer* ProcessorAnalyzerFactory::factory(const std::string &className) const
   {
      Analyzer* ptr = 0;

      // Try subfactories first (if any)
      ptr = trySubfactories(className);
      if (ptr) return ptr;

      // Analyzers
      if (className == "LogStep") {
         ptr = new LogStep(processor());
      } else
      if (className == "LammpsDumpWriter") {
         ptr = new LammpsDumpWriter(processor());
      }  else
      if (className == "PairEnergy") {
         ptr = new PairEnergy(processor());
      } 
      return ptr;
   }

}
