Analyzers (housekeeping):
------------------------

- Review analyzers - try to further standardize outputs.

Memory Management (avoiding user specified memory limits)
----------------------------------------------------------

- Add public allocate(int nTotal) function to ech storage class.
  It can call the current private function internally. This 
  should decide how much memory to allocate, based on any
  information provided in the parameter file along with knownledge
  of the number of processors and total number of atoms or groups.
  Decision can be based on homogeneous distribution along with 
  some generous room for error. 
 
- Modify all configIo objects so as to allocate storage objects
  if not allocated previously. Then comment out, and ultimately
  remove, invocation of private allocate() function in readParam
  and loadParam.  

- Create a function that can be used create a default allocation
  of a GroupStorage when reading the configuration file.

- Create a function estimate the buffer size required during a
  ghost exchange, based on the number of atoms, the slab thickness, 
  and an assumption of homogeneous distribution. 

- Create function to reallocate the AtomArray and AtomStorage.

- Create a reallocateSignal within the AtomStorage, and create a 
  public function of AtomStorage that allows functions to be 
  registered as observers of this signal.

- Create a function of the GroupStorage template that re-sets 
  pointers to atoms. Add code to register this with the 
  reallocateSignal of the AtomStorage. 

- Register a function to clear and rebuild the pair list with 
  the modifyAtomPointers signal. 

- Add code to reallocate AtomArray when the number of atoms is
  too large.

- Finish getting rid of maxBoundary_ parameter of PairPotential
  (currently optional)

- Finish getting rid of atomCapacity_ and pairCapacity_ parameters 
  of PairPotential (currently optional)

- Add code to increase buffer size as needed.

Communicators in Potential Energies
-----------------------------------

  Consider: All computeEnergy and computeStress operations on 
  potential energies (reduce operations) require a communicator
  as an argument. Because the potential energies don't store 
  the address of a communicator, they can't throw exceptions if 
  energy(), pressure(), or stress() query functions are called 
  on slave processors. The BondPotential class (for example) does 
  store pointers to the boundary and associated GroupStorage<2>. 
  Why not have it also store a pointer to the appropriate 
  communicator? The implementation has a pointer to the parent
  Simulation, and thus could get a pointer to the domain, and 
  from that the communicator. Why not have the potential energy 
  object also store a pointer to the associated communicator, 
  when compiled with MPI? Admittedly, this is not needed to 
  compute forces, without reverse communication, but it is 
  needed to compute energy or stress.
  
   
Coulomb:
--------

- Add framework for coulomb interactions, similar to the one developed
  for McMd.

- Implement Ewald coulomb interactions in DdMd.

- Implement PPPM Ewald coulomb interactions.

Exchanger:
----------

- Write separate algorithm for initial ghost exchange, to reduce memory 
  requirements See doc/notes/ddMd/initGhosts

- Add memory usage statistics, to measure which communication step (atom
  exchange or ghost exchange) uses the most memory

- Improve error checking of conditions that can lead to incomplete groups.
  Under what conditions can a group span two boundaries in the same 
  direction ?  Is there a bound to how far a ghost can move without 
  causing a possible error ?

Atom Sorting:
-------------

- Implement periodic sorting of atoms. Note: Like re-allocation, this will
  require resetting of all pointers stored in Group objects, and rebuilding
  of the pairlist. 

Non-orthogonal boundaries:
--------------------------

- Generalize makeSnapShot and needsExchange methods in AtomStorage to
  allow for non-orthogonal boundaries (requires changes to Boundary)

- Modify calculation of distances between cells in construction of Offset
  array in DdMd::CellList. Perhaps move calculation to Boundary class

Buffer:
-------

- Allocate in bytes, remove atomCapacity and ghostCapacity 
  (see doc/notes/ddMd/Buffer)

- Make sure memory statistics include all usage, including setup

- Consider moving allocation of Buffer to Exchanger

AtomStorage:
------------

- Make sure memory statistics include all usage, including setup, so
  that the user has a better indication of when the ghost capacity 
  needs to be increased.

- Consider adding mechanism to increase capacity as needed.

Moving GroupStorage to Potential class:
---------------------------------------

- see doc/notes/ddMd/GroupStorage

- Make each GroupStorage a member of the associated potential

Perturbation:
-------------

- Add perturbation class and class hierarchy for use with 
  multi-system parallel simulations

Hybrid MD
---------

- Finish and test transactions in AtomStorage (in transactions branch)

- Add transactions to GroupStorage (in transactions branch)


Single Processor Operation 
--------------------------

- Is this necessary, or is it a pipe dream? We already have mdSim.

- If we do this: Modify Distributor, Collector, ConfigIo, and Exchanger 
  classes to work ifndef UTIL_MPI, continue with other classes, to enable 
  single processor operation with no MPI

