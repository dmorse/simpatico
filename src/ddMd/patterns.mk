# -------------------------------------------------------------------
# File: src/ddMd/patterns.mk
#
# This makefile fragment contains the pattern rule used to compile all
# source files in the directory tree rooted at the directory src/ddMd, 
# which contains the source code for the DdMd namespace.  It must be 
# directly included by all makefile files in this directory tree, and 
# indirectly includes all relevant namespace-level configuration 
# (config.mk) and source-file list (source.mk) files from the src/ddMd, 
# src/simp and src/util directories.  This file must be included in 
# each makefile in src/ddMd after the definition of $(SRC_BLD_REL) and 
# after inclusion of the main build directory config file, 
# $(BLD_DIR)/config.mk.
#--------------------------------------------------------------------
# Makefile fragment includes 

# Namespace level build configuration files
# Include *_DEFS macro definitions, paths to libraries and executables
include $(BLD_DIR)/util/config.mk
include $(BLD_DIR)/simp/config.mk
include $(BLD_DIR)/ddMd/config.mk

# Namespace level source file lists
# Include recipes for library targets
include $(SRC_DIR)/util/sources.mk
include $(SRC_DIR)/simp/sources.mk
include $(SRC_DIR)/ddMd/sources.mk

#--------------------------------------------------------------------
# Makefile variable definitions

# Lists of all macro definitions required in different contexts
UTIL_DEFINES=$(UTIL_DEFS)
SIMP_DEFINES=$(UTIL_DEFS) $(SIMP_DEFS)
DDMD_DEFINES=$(UTIL_DEFS) $(SIMP_DEFS) $(DDMD_DEFS)

# Dependencies on build configuration files
# These are added to lists of dependecies generated by $(MAKEDEP)
UTIL_CFGS= -A$(BLD_DIR)/config.mk
UTIL_CFGS+= -A$(BLD_DIR)/util/config.mk
SIMP_CFGS= $(UTIL_CFGS)
SIMP_CFGS+= -A$(BLD_DIR)/simp/config.mk
DDMD_CFGS= $(SIMP_CFGS)
DDMD_CFGS+= -A$(BLD_DIR)/ddMd/config.mk

# All libraries needed to link executables in src/ddMd
LIBS= $(ddMd_LIB) $(simp_LIB) $(util_LIB) 

#--------------------------------------------------------------------
# Pattern rules

# Pattern rule to compile all *.cpp class source files in src/ddMd
$(BLD_DIR)/ddMd/%.o: $(SRC_DIR)/ddMd/%.cpp
	@SDIR=$$(dirname "$@"); if [ ! -d "$$SDIR" ]; then mkdir -p "$$SDIR"; fi
	$(CXX) $(INCLUDES) $(DDMD_DEFINES) $(CXXFLAGS) -c -o $@ $<
ifdef MAKEDEP
	$(MAKEDEP) $(INCLUDES) $(DDMD_DEFINES) $(CXXFLAGS) $(DDMD_CFGS) -S$(SRC_DIR) -B$(BLD_DIR) $<
endif

# Rule to compile all *.cpp class source files in src/simp
$(BLD_DIR)/simp/%.o: $(SRC_DIR)/simp/%.cpp
	@SDIR=$$(dirname "$@"); if [ ! -d "$$SDIR" ]; then mkdir -p "$$SDIR"; fi
	$(CXX) $(INCLUDES) $(SIMP_DEFINES) $(CXXFLAGS) -c -o $@ $<
ifdef MAKEDEP
	$(MAKEDEP) $(INCLUDES) $(SIMP_DEFINES) $(CXXFLAGS) $(SIMP_CFGS) -S$(SRC_DIR) -B$(BLD_DIR) $<
endif

# Rule to compile all *.cpp class source files in src/util
$(BLD_DIR)/util/%.o: $(SRC_DIR)/util/%.cpp
	@SDIR=$$(dirname "$@"); if [ ! -d "$$SDIR" ]; then mkdir -p "$$SDIR"; fi
	$(CXX) $(INCLUDES) $(UTIL_DEFINES) $(CXXFLAGS) -c -o $@ $<
ifdef MAKEDEP
	$(MAKEDEP) $(INCLUDES) $(UTIL_DEFINES) $(CXXFLAGS) $(UTIL_CFGS) -S$(SRC_DIR) -B$(BLD_DIR) $<
endif

# Rule to compile all *.cc test programs in src/ddMd/tests
$(BLD_DIR)/ddMd/tests/%.o: $(SRC_DIR)/ddMd/tests/%.cc 
	$(CXX) $(INCLUDES) $(DDMD_DEFINES) $(TESTFLAGS) -c -o $@ $<
ifdef MAKEDEP
	$(MAKEDEP) $(INCLUDES) $(DDMD_DEFINES) $(TESTFLAGS) $(DDMD_CFGS) -S$(SRC_DIR) -B$(BLD_DIR) $<
endif

# Rule to link all *.cc executable test programs in src/ddMd/tests
$(BLD_DIR)/ddMd/tests/%: $(BLD_DIR)/ddMd/tests/%.o $(LIBS)
	$(CXX) -o $@ $@.o $(LIBS) $(LDFLAGS)

